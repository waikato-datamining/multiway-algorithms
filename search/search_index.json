{
    "docs": [
        {
            "location": "/",
            "text": "Multiway Algorithms\n\n\nJava library of multi-way algorithms.\n\n\nAlgorithms\n\n\nAvailable algorithms:\n\n\n\n\nPARAFAC\n\n\n\n\nPlanned:\n\n\n\n\nMulti-way PLS\n\n\nNon-negative Matrix Factorization (NMF)\n\n\nMultivariate Filtering\n\n\n\n\nMaven\n\n\nAdd the following dependency in your \npom.xml\n:\n\n\n   <dependency>\n     <groupId>nz.ac.waikato.cms.adams</groupId>\n     <artifactId>multiway-algorithms</artifactId>\n     <version>0.0.1</version>\n   </dependency>",
            "title": "Home"
        },
        {
            "location": "/#multiway-algorithms",
            "text": "Java library of multi-way algorithms.",
            "title": "Multiway Algorithms"
        },
        {
            "location": "/#algorithms",
            "text": "Available algorithms:   PARAFAC   Planned:   Multi-way PLS  Non-negative Matrix Factorization (NMF)  Multivariate Filtering",
            "title": "Algorithms"
        },
        {
            "location": "/#maven",
            "text": "Add the following dependency in your  pom.xml :     <dependency>\n     <groupId>nz.ac.waikato.cms.adams</groupId>\n     <artifactId>multiway-algorithms</artifactId>\n     <version>0.0.1</version>\n   </dependency>",
            "title": "Maven"
        },
        {
            "location": "/algorithms/algorithms/",
            "text": "The PARAFAC Model\n\n\nPARAFAC\n allows the decomposition of three-way data into three loading matrices. \n\n\nParameters\n\n\n\n\n\n\n\n\nParameter Name\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumComponents\n\n\n3\n\n\nNumber of components of the loading matrices.\n\n\n\n\n\n\nnumStarts\n\n\n1\n\n\nNumber of restarts to find a better minimum. This is only effective if \ninitMethod=RANDOM\n.\n\n\n\n\n\n\ninitMethod\n\n\nPARAFAC.Initialization.SVD\n\n\nInitialization method for the loading matrices. Can be one of \n{PARAFAC.Initialization.RANDOM, PARAFAC.Initialization.SVD}\n.\n\n\n\n\n\n\n\n\nExample Code\n\n\nint nComponents = ... // Choose a number of components F for the loading matrices\ndouble[][][] data = ... // e.g. load data of shape (I x J x K)\nPARAFAC pf = new PARAFAC();\npf.setNumComponents(nComponents);\npf.buildModel(data);\ndouble[][][] loadingMatrices = pf.getBestLoadingMatrices();\n// loadingMatrices[0] is of shape (I x F)\n// loadingMatrices[1] is of shape (J x F)\n// loadingMatrices[2] is of shape (K x F)",
            "title": "PARAFAC"
        },
        {
            "location": "/algorithms/algorithms/#the-parafac-model",
            "text": "PARAFAC  allows the decomposition of three-way data into three loading matrices.",
            "title": "The PARAFAC Model"
        },
        {
            "location": "/algorithms/algorithms/#parameters",
            "text": "Parameter Name  Default Value  Description      numComponents  3  Number of components of the loading matrices.    numStarts  1  Number of restarts to find a better minimum. This is only effective if  initMethod=RANDOM .    initMethod  PARAFAC.Initialization.SVD  Initialization method for the loading matrices. Can be one of  {PARAFAC.Initialization.RANDOM, PARAFAC.Initialization.SVD} .",
            "title": "Parameters"
        },
        {
            "location": "/algorithms/algorithms/#example-code",
            "text": "int nComponents = ... // Choose a number of components F for the loading matrices\ndouble[][][] data = ... // e.g. load data of shape (I x J x K)\nPARAFAC pf = new PARAFAC();\npf.setNumComponents(nComponents);\npf.buildModel(data);\ndouble[][][] loadingMatrices = pf.getBestLoadingMatrices();\n// loadingMatrices[0] is of shape (I x F)\n// loadingMatrices[1] is of shape (J x F)\n// loadingMatrices[2] is of shape (K x F)",
            "title": "Example Code"
        },
        {
            "location": "/stopping/",
            "text": "Stopping Iterative Algorithms\n\n\nIterative algorithms allow for different stopping criteria such as:\n\n\n\n\nTimeStoppingCriterion\n: Define a maximum time in seconds\n\n\nImprovementStoppingCriterion\n: Stop after improvement between two iterations is below a certain threshold\n\n\nIterationStoppingCriterion\n: Stop after \nmaxIter\n number of iterations\n\n\n\n\nMultiple criteria can be added as follows:\n\n\nPARAFAC alg = new PARAFAC();\nalg.addStoppingCriterion(CriterionUtils.iterations(1000)); // Stop after 1000 iterations\nalg.addStoppingCriterion(CriterionUtils.time(100)); // Stop after 100 seconds\nalg.addStoppingCriterion(CriterionUtils.improvement(10E-10)); // Stop if relative improvement is less than 10E-10\n\n\n\n\nNote\n\n\n\n\nAlgorithm stops if one of the criteria matches \n\n\nAdding a certain criterion multiple times will result in overwriting.",
            "title": "Stopping Criteria"
        },
        {
            "location": "/stopping/#stopping-iterative-algorithms",
            "text": "Iterative algorithms allow for different stopping criteria such as:   TimeStoppingCriterion : Define a maximum time in seconds  ImprovementStoppingCriterion : Stop after improvement between two iterations is below a certain threshold  IterationStoppingCriterion : Stop after  maxIter  number of iterations   Multiple criteria can be added as follows:  PARAFAC alg = new PARAFAC();\nalg.addStoppingCriterion(CriterionUtils.iterations(1000)); // Stop after 1000 iterations\nalg.addStoppingCriterion(CriterionUtils.time(100)); // Stop after 100 seconds\nalg.addStoppingCriterion(CriterionUtils.improvement(10E-10)); // Stop if relative improvement is less than 10E-10",
            "title": "Stopping Iterative Algorithms"
        },
        {
            "location": "/stopping/#note",
            "text": "Algorithm stops if one of the criteria matches   Adding a certain criterion multiple times will result in overwriting.",
            "title": "Note"
        },
        {
            "location": "/data/",
            "text": "Reading Data\n\n\nThe \nDataReader\n class provides methods to read different file formats.\n\n\nThree-Way Sparse Data\n\n\nDataReader.read3WaySparse(...)\n reads sparse data, giving the indices and the corresponding value, of the following format :\n\n\nx0 y0 z0 value0\nx0 y0 z1 value1\n...",
            "title": "Data"
        },
        {
            "location": "/data/#reading-data",
            "text": "The  DataReader  class provides methods to read different file formats.",
            "title": "Reading Data"
        },
        {
            "location": "/data/#three-way-sparse-data",
            "text": "DataReader.read3WaySparse(...)  reads sparse data, giving the indices and the corresponding value, of the following format :  x0 y0 z0 value0\nx0 y0 z1 value1\n...",
            "title": "Three-Way Sparse Data"
        }
    ]
}