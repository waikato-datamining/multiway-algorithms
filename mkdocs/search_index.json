{
    "docs": [
        {
            "location": "/",
            "text": "Multiway Algorithms\n\n\nJava library of multi-way algorithms.\n\n\nAlgorithms\n\n\nAvailable algorithms:\n\n\n\n\nPARAFAC\n\n\n\n\nPlanned:\n\n\n\n\nMulti-way PLS\n\n\nNon-negative Matrix Factorization (NMF)\n\n\nMultivariate Filtering\n\n\n\n\nData\n\n\nData",
            "title": "Home"
        },
        {
            "location": "/#multiway-algorithms",
            "text": "Java library of multi-way algorithms.",
            "title": "Multiway Algorithms"
        },
        {
            "location": "/#algorithms",
            "text": "Available algorithms:   PARAFAC   Planned:   Multi-way PLS  Non-negative Matrix Factorization (NMF)  Multivariate Filtering",
            "title": "Algorithms"
        },
        {
            "location": "/#data",
            "text": "Data",
            "title": "Data"
        },
        {
            "location": "/algorithms/",
            "text": "PARAFAC (three-way)\n\n\nPARAFAC\n allows the decomposition of three-way data into three loading matrices. \nExample:\n\n\nint nComponents = ... // Choose a number of components F for the loading matrices\ndouble[][][] data = ... // e.g. load data of shape (I x J x K)\nPARAFAC pf = new PARAFAC(nComponents);\npf.buildModel(data);\ndouble[][][] loadingMatrices = pf.getLoadingMatrices();\n// loadingMatrices[0] is of shape (I x F)\n// loadingMatrices[1] is of shape (J x F)\n// loadingMatrices[2] is of shape (K x F)\n\n\n\n\nThe loading matrices can further be initialized either randomly drawing from \nN(0,1)\n or with the eigenvectors of the matricized data tensor along each axis. \nPARAFAC.Initialization\n can be passed to the \nPARAFAC\n constructor.",
            "title": "Algorithms"
        },
        {
            "location": "/stopping/",
            "text": "Stopping Iterative Algorithms\n\n\nIterative algorithms allow for different stopping criteria such as:\n\n\n\n\nTimeStoppingCriterion\n: Define a maximum time in seconds\n\n\nImprovementStoppingCriterion\n: Stop after improvement between two iterations is below a certain threshold\n\n\nIterationStoppingCriterion\n: Stop after \nmaxIter\n number of iterations\n\n\n\n\nMultiple criteria can be added as follows:\n\n\nPARAFAC alg = new PARAFAC(...);\nalg.addStoppingCriterion(new IterationStoppingCriterion(1000)); // Stop after 1000 iterations\nalg.addStoppingCriterion(new TimeStoppingCriterion(100)); // Stop after 100 seconds\nalg.addStoppingCriterion(new ImprovementStoppingCriterion(10E-10)); // Stop if relative improvement is less than 10E-10\n\n\n\n\nNote\n:\n- Algorithm stops if one of the criteria matches \n- Adding a certain criterion multiple times will result in overwriting.",
            "title": "Stopping Criteria"
        },
        {
            "location": "/stopping/#stopping-iterative-algorithms",
            "text": "Iterative algorithms allow for different stopping criteria such as:   TimeStoppingCriterion : Define a maximum time in seconds  ImprovementStoppingCriterion : Stop after improvement between two iterations is below a certain threshold  IterationStoppingCriterion : Stop after  maxIter  number of iterations   Multiple criteria can be added as follows:  PARAFAC alg = new PARAFAC(...);\nalg.addStoppingCriterion(new IterationStoppingCriterion(1000)); // Stop after 1000 iterations\nalg.addStoppingCriterion(new TimeStoppingCriterion(100)); // Stop after 100 seconds\nalg.addStoppingCriterion(new ImprovementStoppingCriterion(10E-10)); // Stop if relative improvement is less than 10E-10  Note :\n- Algorithm stops if one of the criteria matches \n- Adding a certain criterion multiple times will result in overwriting.",
            "title": "Stopping Iterative Algorithms"
        },
        {
            "location": "/data/",
            "text": "Reading Data\n\n\nThe \nDataReader\n class provides methods to read different file formats.\n\n\nThree-Way Sparse Data\n\n\nDataReader.read3WaySparse(...)\n reads sparse data, giving the indices and the corresponding value, of the following format :\n\n\nx0 y0 z0 value0\nx0 y0 z1 value1\n...",
            "title": "Data"
        },
        {
            "location": "/data/#reading-data",
            "text": "The  DataReader  class provides methods to read different file formats.",
            "title": "Reading Data"
        },
        {
            "location": "/data/#three-way-sparse-data",
            "text": "DataReader.read3WaySparse(...)  reads sparse data, giving the indices and the corresponding value, of the following format :  x0 y0 z0 value0\nx0 y0 z1 value1\n...",
            "title": "Three-Way Sparse Data"
        }
    ]
}